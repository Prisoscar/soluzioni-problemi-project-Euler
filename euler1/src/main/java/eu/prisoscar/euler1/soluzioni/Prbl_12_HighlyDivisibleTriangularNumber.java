package eu.prisoscar.euler1.soluzioni;

import java.util.AbstractMap;

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */
public class Prbl_12_HighlyDivisibleTriangularNumber {

    private static final int TARGET_DIVISORS = 500;

    public static AbstractMap.SimpleEntry<Long, Integer> getSolution(){
        AbstractMap.SimpleEntry<Long, Integer> solution;
        int divisors = 1;
        int triangularNumberCounter = 1;
        long triangularNumber = 1;
        while (divisors <= TARGET_DIVISORS){
            triangularNumberCounter++;
            triangularNumber += triangularNumberCounter;
            divisors = numberOfDivisors(triangularNumber);
        }
        solution = new AbstractMap.SimpleEntry<>(triangularNumber, triangularNumberCounter);
        return solution;
    }

    private static int numberOfDivisors(long number) {
        if (number <= 0) return 0;
        if (number == 1) return 1;
        if (number == 2) return 2;
        int divisors = 2;
        int i = 2;
        do{
            if (number % i == 0) divisors += 2;
            i++;
        }while (i < number/i);
        if (Math.sqrt(number) % 1 == 0) divisors--;
        return divisors;
    }
}
